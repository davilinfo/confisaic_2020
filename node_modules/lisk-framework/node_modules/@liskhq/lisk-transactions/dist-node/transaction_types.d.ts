import { TransactionError } from './errors';
export interface Account {
    readonly address: string;
    readonly balance: string;
    readonly delegate?: Delegate;
    readonly publicKey?: string;
    readonly secondPublicKey?: string | null;
    readonly secondSignature?: number;
    readonly membersPublicKeys?: ReadonlyArray<string>;
    readonly multiMin?: number;
    readonly multiLifetime?: number;
    readonly username?: string | null;
    readonly votedDelegatesPublicKeys?: ReadonlyArray<string>;
    readonly isDelegate?: number;
    readonly vote?: number;
}
export interface Delegate {
    readonly username: string;
}
export interface TransactionJSON {
    readonly asset: object;
    readonly id?: string;
    readonly blockId?: string;
    readonly height?: number;
    readonly confirmations?: number;
    readonly senderPublicKey: string;
    readonly signature?: string;
    readonly signatures?: ReadonlyArray<string>;
    readonly signSignature?: string;
    readonly timestamp: number;
    readonly type: number;
    readonly receivedAt?: string;
    readonly networkIdentifier?: string;
}
export interface IsValidResponse {
    readonly valid: boolean;
    readonly errors?: ReadonlyArray<TransactionError>;
}
export interface IsValidResponseWithError {
    readonly valid: boolean;
    readonly error?: TransactionError;
}
export interface IsVerifiedResponse {
    readonly verified: boolean;
    readonly errors?: ReadonlyArray<TransactionError>;
}
