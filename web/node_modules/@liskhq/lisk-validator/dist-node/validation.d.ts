import * as BigNum from '@liskhq/bignum';
import { gte as isVersionGte, gtr as isGreaterThanVersionInRange, ltr as isLessThanVersionInRange } from 'semver';
export declare const isNullCharacterIncluded: (input: string) => boolean;
export declare const isUsername: (username: string) => boolean;
export declare const isSignature: (signature: string) => boolean;
export declare const isGreaterThanZero: (amount: BigNum) => boolean;
export declare const isGreaterThanMaxTransactionAmount: (amount: BigNum) => boolean;
export declare const isGreaterThanMaxTransactionId: (id: BigNum) => boolean;
export declare const isNumberString: (num: unknown) => boolean;
export declare const isPositiveNumberString: (num: unknown) => boolean;
export declare const isValidInteger: (num: unknown) => boolean;
export declare const hasNoDuplicate: (values: readonly string[]) => boolean;
export declare const isStringBufferLessThan: (data: unknown, max: number) => boolean;
export declare const isHexString: (data: unknown) => boolean;
export declare const isEncryptedPassphrase: (data: string) => boolean;
export declare const isSemVer: (version: string) => boolean;
export declare const isRangedSemVer: (version: string) => boolean;
export declare const isLessThanRangedVersion: typeof isLessThanVersionInRange;
export declare const isGreaterThanRangedVersion: typeof isGreaterThanVersionInRange;
export declare const isProtocolString: (data: string) => boolean;
export declare const isIPV4: (data: string) => boolean;
export declare const isIPV6: (data: string) => boolean;
export declare const isIP: (data: string) => boolean;
export declare const isPort: (port: string) => boolean;
export declare const validatePublicKeysForDuplicates: (publicKeys: readonly string[]) => boolean;
export declare const isStringEndsWith: (target: string, suffixes: readonly string[]) => boolean;
export declare const isVersionMatch: typeof isVersionGte;
export declare const validatePublicKey: (publicKey: string) => boolean;
export declare const validatePublicKeys: (publicKeys: readonly string[]) => boolean;
export declare const validateKeysgroup: (keysgroup: readonly string[], min: number, max: number) => boolean;
export declare const validateAddress: (address: string) => boolean;
export declare const isValidNonTransferAmount: (data: string) => boolean;
export declare const isValidTransferAmount: (data: string) => boolean;
export declare const isValidFee: (data: string) => boolean;
export declare const isCsv: (data: string) => boolean;
export declare const isValidTransferData: (data: string) => boolean;
export declare const validateNetworkIdentifier: (networkIdentifier: string) => boolean;
